{"ast":null,"code":"export const alphaSort = (array, sortParam, sortDir) => {\n  const compare = (a, b) => {\n    let paramA;\n    let paramB;\n\n    if (sortParam === 'date') {\n      paramA = Date.parse(a.fields[sortParam]);\n      paramB = Date.parse(b.fields[sortParam]);\n    } else {\n      paramA = a.fields[sortParam];\n      paramB = b.fields[sortParam];\n    }\n\n    if (sortDir) {\n      if (paramA < paramB) {\n        return -1;\n      }\n\n      if (paramA > paramB) {\n        return 1;\n      }\n    } else if (Object.keys(array[0].fields).includes('vendor')) {\n      if (paramA > paramB) {\n        return -1;\n      }\n\n      if (paramA < paramB) {\n        return 1;\n      }\n    }\n\n    return 0;\n  };\n\n  array.sort(compare);\n  return array;\n};","map":{"version":3,"sources":["/home/mick/apps/bluehouse/client/src/Components/alphaSort.js"],"names":["alphaSort","array","sortParam","sortDir","compare","a","b","paramA","paramB","Date","parse","fields","Object","keys","includes","sort"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAACC,KAAD,EAAQC,SAAR,EAAmBC,OAAnB,KAA+B;AACpD,QAAMC,OAAO,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtB,QAAIC,MAAJ;AACA,QAAIC,MAAJ;;AACA,QAAIN,SAAS,KAAK,MAAlB,EAA0B;AACtBK,MAAAA,MAAM,GAAGE,IAAI,CAACC,KAAL,CAAWL,CAAC,CAACM,MAAF,CAAST,SAAT,CAAX,CAAT;AACAM,MAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACK,MAAF,CAAST,SAAT,CAAX,CAAT;AAEH,KAJD,MAIO;AAEHK,MAAAA,MAAM,GAAGF,CAAC,CAACM,MAAF,CAAST,SAAT,CAAT;AACAM,MAAAA,MAAM,GAAGF,CAAC,CAACK,MAAF,CAAST,SAAT,CAAT;AACH;;AACD,QAAIC,OAAJ,EAAa;AAET,UAAII,MAAM,GAAGC,MAAb,EAAqB;AACjB,eAAO,CAAC,CAAR;AACH;;AACD,UAAID,MAAM,GAAGC,MAAb,EAAqB;AACjB,eAAO,CAAP;AACH;AACJ,KARD,MAQO,IAAII,MAAM,CAACC,IAAP,CAAYZ,KAAK,CAAC,CAAD,CAAL,CAASU,MAArB,EAA6BG,QAA7B,CAAsC,QAAtC,CAAJ,EAAqD;AAExD,UAAIP,MAAM,GAAGC,MAAb,EAAqB;AACjB,eAAO,CAAC,CAAR;AACH;;AACD,UAAID,MAAM,GAAGC,MAAb,EAAqB;AACjB,eAAO,CAAP;AACH;AAEJ;;AACD,WAAO,CAAP;AAEH,GAhCD;;AAiCAP,EAAAA,KAAK,CAACc,IAAN,CAAWX,OAAX;AACA,SAAOH,KAAP;AAEH,CArCM","sourcesContent":["export const alphaSort = (array, sortParam, sortDir) => {\n    const compare = (a, b) => {\n        let paramA\n        let paramB\n        if (sortParam === 'date') {\n            paramA = Date.parse(a.fields[sortParam])\n            paramB = Date.parse(b.fields[sortParam])\n\n        } else {\n\n            paramA = a.fields[sortParam]\n            paramB = b.fields[sortParam]\n        }\n        if (sortDir) {\n\n            if (paramA < paramB) {\n                return -1;\n            }\n            if (paramA > paramB) {\n                return 1;\n            }\n        } else if (Object.keys(array[0].fields).includes('vendor')) {\n\n            if (paramA > paramB) {\n                return -1;\n            }\n            if (paramA < paramB) {\n                return 1;\n            }\n\n        }\n        return 0;\n\n    }\n    array.sort(compare)\n    return array\n\n}"]},"metadata":{},"sourceType":"module"}